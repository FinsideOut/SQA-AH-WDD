<?php include 'includes/header.php';
include 'includes/utils.php'; ?>

<!-- NOTES -->
<div class="tile">
    <h2>&#9999;&#65039; Database Connections</h2>
    <p>There are no new concepts to learn when connecting to a database, however there are lots of steps to it and
        loooooots of new syntax.</p>
    <p>If you have chosen a WDD main and a DDD secondary for your project, you will only need to deal with a
        flatfile
        database.</p>
</div>

<!-- IMPORTANT -->
<div class="tile">
    <h2>&#10071;Setup</h2>
    <h3 id="reveal"><i>Click to reveal setup instructions</i></h3>
    <div class="hidden" id="instructions">
        <p>Before the examples and tasks below will work, you need to do a few things..</p>
        <h3>Step One:</h3>
        <p>Click on MySQL Admin:</p>
        <div class="image-container">
            <img src="img/adminButton.png" alt="" width="600px">
        </div>
        <h3>Step Two:</h3>
        <p>Create a new database called "MyPokedex"</p>
        <div class="image-container">
            <img src="img/createDatabase.png" alt="" width="600px">
        </div>
        <h3>Step Three:</h3>
        <p>Click on SQL and paste the contents of "MyPokedex.SQL" to create a new table.</p>
        <div class="image-container">
            <img src="img/createTable.png" alt="" width="600px">
        </div>
        <h3>Step Four:</h3>
        <p>Go to privaleges and click "Add user account"</p>
        <div class="image-container">
            <img src="img/privalegesButton.png" alt="" width="600px">
        </div>
        <h3>Step Five:</h3>
        <p>Make yourself an account and make sure to give yourself global privaleges. <b>DO NOT USE THAT ONE SAME
                PASSWORD
                THAT YOU USE FOR EVERYTHING (tsk tsk).</b> Use something easy to remember. Mr Ketchum's is "1234"
        </p>
        <div class="image-container">
            <img src="img/userAccount.png" alt="" width="600px">
        </div>
    </div>
</div>

<!-- CODE EXAMPLE ONE -->
<div class="tile">
    <h2>&#x1F440; Simple Select</h2>
    <p>The following Pokemon name and attack stat is retrieved from the database using PHP and SQL.</p>
    <?php
    // Create a database connection
    $dbhost = 'localhost';
    $dbuser = 'AshKetchum';
    $dbpass = '1234';
    $dbname = 'MyPokedex';
    $connection = mysqli_connect($dbhost, $dbuser, $dbpass, $dbname);

    // Query the database
    $queryString = <<<SQL
            SELECT name, attack
            FROM Pokemon
            WHERE PokemonID = 6;
        SQL;
    $result = mysqli_query($connection, $queryString);

    // close the connection
    mysqli_close($connection);

    // display the data.
    // mysqli_fetch_assoc() fetches the next row in the returned table each time it is called
    $row = mysqli_fetch_assoc($result);
    echo '<p> The Attack stat of ' . $row['name'] . ' is ' . $row['attack'] . '!</p>';
    ?>
</div>

<!-- CODE EXAMPLE TWO -->
<div class="tile">
    <h2>&#x1F440; Using Functions in PHP</h2>
    <p>There is a lot of code in Example One, all to do very little.</p>
    <p>Since we will be accessing the database lots, let's write a function that will handle all of the repeated
        code.
        We can also include some additional error handling.</p>
    <?php
    $queryString = <<<SQL
            SELECT name, attack
            FROM Pokemon
            WHERE PokemonID = 3;
        SQL;

    // The runQuery function is in utils, which is included under the header at the top of this file
    $data = runQuery($queryString);
    $row = mysqli_fetch_assoc($data);
    echo '<p> The Attack stat of ' . $row['name'] . ' is ' . $row['attack'] . '!</p>';
    ?>
</div>

<!-- CODE EXAMPLE THREE -->
<div class="tile">
    <h2>&#x1F440; User Interaction</h2>
    <p>In this example we use the GET method to translate the user's mouse clicks into an SQL query, and then
        display
        the data in a table generated by PHP.</p>
    <p>This is the largest code example you've looked at so far. Take your time with it and step through it
        logically.
    </p>

    <!-- HTML form -->
    <form action="connecting-to-a-database.php" method="GET">
        <label for="type">Select Type</label>
        <select id="type" name="type" required>
            <option value="Grass">Grass</option>
            <option value="water">water</option>
            <option value="Fire">Fire</option>
        </select>
        <br>
        <fieldset>
            <legend>Order By</legend>
            <label for="sort">Number</label>
            <input type="radio" name="sort" value="PokemonID" id="">
            <br>
            <label for="sort">Attack</label>
            <input type="radio" name="sort" value="Attack" id="">
            <br>
            <label for="sort">Defence</label>
            <input type="radio" name="sort" value="Defense" id="">
            <br>
        </fieldset>
        <br>
        <input type="submit">
    </form>

    <!-- set up table to display result -->
    <table class='styled-table'>
        <thead>
            <tr>
                <th>Pokedex Number</th>
                <th>Name</th>
                <th>Type One</th>
                <th>Type Two</th>
                <th>Attack</th>
                <th>Defence</th>
            </tr>
        </thead>
        <tbody>
            <?php
            // When a page is loaded it defaults to the GET method.
            // So to prevent the following PHP from executing the first time the page is loaded, we use the isset() function.
            // This checks to see if the form has been filled out
            if ($_SERVER['REQUEST_METHOD'] == 'GET' && isset($_GET['type'], $_GET['sort'])) {
                $type = $_GET['type'];
                $sort = $_GET['sort'];

                // query db 
                $queryString = <<<SQL
                            SELECT * FROM Pokemon
                            WHERE Type1 = '$type'
                            OR Type2 = '$type'
                            ORDER BY $sort DESC;
                        SQL;
                $data = runQuery($queryString);

                // get first row in data table
                $row = mysqli_fetch_assoc($data);
                while ($row) { // loop only if the row is not null
                    echo '<tr>';
                    echo '<td>' . $row['PokemonID'] . '</td>';
                    echo '<td>' . $row['Name'] . '</td>';
                    echo '<td>' . $row['Type1'] . '</td>';
                    echo '<td>' . $row['Type2'] . '</td>';
                    echo '<td>' . $row['Attack'] . '</td>';
                    echo '<td>' . $row['Defense'] . '</td>';
                    echo '</tr>';
                    // fetch next row
                    $row = mysqli_fetch_assoc($data);
                }
            }
            ?>
        </tbody>
    </table>

</div>

<div class="tile">
    <h2>&#x1F440; INSERT, UPDATE and DELETE</h2>
    <h3>INSERT</h3>
    <p>By pressing the submit button, you will add a new grass type pokemon to the databse.</p>
    <p><i>check by using the table in example three</i></p>
    <form action="connecting-to-a-database.php" method="GET">
        <input type="submit" name="insert">
    </form>
    <?php
    if (isset($_GET['insert'])) {
        $queryString = <<<SQL
            INSERT INTO pokemon (Name, Type1, Type2, HP, Attack, Defense, SpecialAttack, SpecialDefense, Speed, Generation, Legendary)
            VALUES('MrW', 'Grass', NULL, 100,100,100,100,100,100,1,0);
        SQL;
        runQuery($queryString);
    }
    ?>

    <h3>UPDATE</h3>
    <p>By pressing the submit button, you will add change the Defense stat of the new pokemon to 150.</p>
    <form action="connecting-to-a-database.php" method="GET">
        <input type="submit" name="update">
    </form>
    <?php
    if (isset($_GET['update'])) {
        $queryString = <<<SQL
            UPDATE pokemon
            SET Defense = 150
            WHERE Name = "MrW";
        SQL;
        runQuery($queryString);
    }
    ?>

    <h3>DELETE</h3>
    <p>By pressing the submit button, you will add remove the new pokemon from the table</p>
    <form action="connecting-to-a-database.php" method="GET">
        <input type="submit" name="delete">
    </form>
    <?php
    if (isset($_GET['delete'])) {
        $queryString = <<<SQL
            DELETE FROM pokemon
            WHERE Name = "MrW";
        SQL;
        runQuery($queryString);
    }
    ?>
</div>

<!-- TASK ONE -->
<div class="tile">
    <h2>&#10067;Task One</h2>
    <p>By querying the pokedex, echo the name of the pokemon with the highest speed stat.</p>
    <h3>Your code here</h3>
    <!-- START TASK 1 HERE -->

    <!-- END TASK 1 HERE -->
</div>

<!-- TASK TWO -->
<div class="tile">
    <h2>&#10067;Task Two</h2>
    <p>Display the name, special defence and both types of all pokemon with a special defence stat less than 80.</p>
    <p><i>Use a table to display the data</i></p>
    <h3>Your code here</h3>
    <!-- START TASK 2 HERE -->

    <!-- END TASK 2 HERE -->
</div>

<!-- TASK Three -->
<div class="tile">
    <h2>&#10067;Task Three</h2>
    <p>In the space below, write a form that will allow the user to enter the name of a pokemon. When the form is
        submitted the <b>special attack</b>, <b>special defence</b> and <b>speed</b> of that pokemon
        should echoed in PHP (just like in examples one and two).</p>
    <p>Before you begin, think: What happens if the user enters a name that doesn't exist in the database? How will you
        handle that
        error? How will you ensure that the input is <b>safe</b>? <i>hint - there is a function in utils that will help
            with
            this</i></p>

    <h3>Your code here</h3>
    <!-- START TASK 3 HERE -->

    <!-- END TASK 3 HERE -->
</div>
<?php
include 'includes/footer.php';
?>